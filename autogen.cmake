#
# Author: Konstantin Gainullin
# Generator for `cmake-auto.ent.hrc`.
# See https://github.com/extrunder/cmake.hrc
#
cmake_minimum_required(VERSION 3.11)

set(OutputHrc "cmake-auto.ent.hrc")
set(SkipCommands "foreach;endforeach" "function;endfunction" "if;endif" "macro;endmacro" "while;endwhile")
set(SkipKeywordForCommands "string;list;file;message;install;set_property;execute_process")
set(SkipVariables "")
set(SkipParameters "DFOO;DBAR;COMMAND1;COMMAND2")

set(Keywords_n "0;1;2;3;4;5;6;7;8;9")
set(Keywords_LANG "C;CXX")
set(Keywords_HASH "MD5;SHA1;SHA224;SHA256;SHA384;SHA512;SHA3_224;SHA3_256;SHA3_384;SHA3_512")
set(Keywords_CONFIG "Debug;Release;RelWithDebInfo")


function(CMakeCall Arguments OutputList Split)
  message(STATUS "Executing: `${CMAKE_COMMAND} ${Arguments}` -> ${OutputList}")
  execute_process(
    COMMAND ${CMAKE_COMMAND} ${Arguments}
    OUTPUT_VARIABLE _OutputList
    RESULT_VARIABLE _Result
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(_Result EQUAL 0)
    if(Split)
      string(REPLACE "\n" ";" _OutputList ${_OutputList})
    endif()
    set(${OutputList} ${_OutputList} PARENT_SCOPE)
  else()
    message(FATAL_ERROR "Could not execute ${CMAKE_COMMAND} ${Arguments}!")
  endif()
endfunction(CMakeCall)

function(SwizzleKernel OutputList OutputCount InputList)
  set(_Matches 0)
  set(_OutputList)
  foreach(_var ${InputList})
    if(_var MATCHES [[<([^>]+)>]])
      foreach(_keyword ${Keywords_${CMAKE_MATCH_1}})
        string(REPLACE ${CMAKE_MATCH_0} ${_keyword} _name ${_var})
        list(APPEND _OutputList ${_name})
        math(EXPR _Matches "${_Matches} + 1")
      endforeach()
    else()
      list(APPEND _OutputList ${_var})
    endif()
  endforeach(_var)
  set(${OutputList} ${_OutputList} PARENT_SCOPE)
  set(${OutputCount} ${_Matches} PARENT_SCOPE)
endfunction()

function(VariableSwizzle OutputList InputList)
  SwizzleKernel(_OutputList _Count "${InputList}")
  while(0 LESS ${_Count})
    SwizzleKernel(_OutputList _Count "${_OutputList}")
  endwhile()
  set(${OutputList} ${_OutputList} PARENT_SCOPE)
endfunction(VariableSwizzle)

function(ParseCommandInfo CommandInfo OutputKeywordsList)
  string(REGEX REPLACE "[\r\n]" " " _Str "${CommandInfo}")
  string(REGEX MATCHALL [[([^ ]+ |[^ ]+$)]] _splits "${_Str}")
  list(REMOVE_DUPLICATES _splits)
  set(_upper "")
  foreach(_word ${_splits})
    string(STRIP _word "${_word}")
    string(TOUPPER "${_word}" _bigstr)
    if(_word STREQUAL _bigstr)
      if(_word MATCHES [[([A-Z_][A-Z0-9_]+)]])
        list(APPEND _upper ${CMAKE_MATCH_1})
      elseif(_word MATCHES [[<([A-Z_][A-Z0-9_]+)>]])
        VariableSwizzle(_swizzled "${CMAKE_MATCH_1}")
        foreach(_each _swizzled)
          list(APPEND _upper ${_each})
        endforeach(_each)
      endif()
    endif()
  endforeach(_word)
  list(REMOVE_ITEM _upper ${SkipParameters})
  list(REMOVE_DUPLICATES _upper)
  list(SORT _upper)
  set(${OutputKeywordsList} ${_upper} PARENT_SCOPE)
endfunction(ParseCommandInfo)

macro(WriteVariables List)
  file(APPEND ${OutputHrc} "\n<scheme name=\"CMakeVariables\">\n")
  file(APPEND ${OutputHrc} "\t<keywords region=\"cmake_variables\" ignorecase=\"yes\">\n")
  foreach(_var ${List})
    if(NOT _var IN_LIST SkipVariables)
      if(_var MATCHES [[<([^>]+)>]])
        file(APPEND ${OutputHrc} "\t\t<!-- ${_var} -->\n")
        VariableSwizzle(_Swizzled "${_var}")
        foreach(_each ${_Swizzled})
          file(APPEND ${OutputHrc} "\t\t<word name=\"${_each}\"/>\n")
        endforeach(_each)
        unset(_Swizzled)
      else()
        file(APPEND ${OutputHrc} "\t\t<word name=\"${_var}\"/>\n")
      endif()
    endif()
  endforeach(_var)
  file(APPEND ${OutputHrc} "\t</keywords>\n")
  file(APPEND ${OutputHrc} "</scheme>\n\n")
endmacro(WriteVariables)

macro(WriteCommands List)
  file(APPEND ${OutputHrc} "<entity name=\"CMakeCommands\" value=\"(?:")
  set(_addPipe NO)
  foreach(_command ${List})
    if(NOT _command IN_LIST SkipCommands)
      if(_addPipe)
        file(APPEND ${OutputHrc} "|${_command}")
      else()
        file(APPEND ${OutputHrc} "${_command}")
        set(_addPipe YES)
      endif()
    endif()
  endforeach(_command)
  unset(_addPipe)
  file(APPEND ${OutputHrc} ")\"/>\n\n")

  file(APPEND ${OutputHrc} "<scheme name=\"CMakeCommands\">\n")
  foreach(_command ${List})
    if(NOT _command IN_LIST SkipCommands)
      file(APPEND ${OutputHrc} "\t<block start=\"/\\b(${_command}\\b%Sep;\\()/ix\" end=\"/(\\))/\" scheme=\"Keywords_${_command}\" region00=\"def:Symbol\" region01=\"def:PairStart\" region10=\"def:Symbol\" region11=\"def:PairEnd\"/>\n")
    endif()
  endforeach(_command)
  file(APPEND ${OutputHrc} "</scheme>\n\n")
endmacro(WriteCommands)

macro(WriteKeywords Command List)
  file(APPEND ${OutputHrc} "\n<scheme name=\"Keywords_${Command}\">\n")
  file(APPEND ${OutputHrc} "\t<keywords region=\"cmake_parameters\" ignorecase=\"yes\" priority=\"low\">\n")
  foreach(_keyword ${List})
    file(APPEND ${OutputHrc} "\t\t<word name=\"${_keyword}\"/>\n")
  endforeach(_keyword)
  file(APPEND ${OutputHrc} "\t</keywords>\n")
  file(APPEND ${OutputHrc} "\t<inherit scheme=\"Arguments\" />\n")
  file(APPEND ${OutputHrc} "</scheme>\n\n")
endmacro(WriteKeywords)

string(TIMESTAMP CurrentTime)
CMakeCall("--version" CMakeVersion NO)
CMakeCall("--help-command-list" CommandList YES)
CMakeCall("--help-variable-list" VariableList YES)
#CMakeCall("--help-property-list" PropertyList YES)
#CMakeCall("--help-module-list" ModuleList YES)

file(WRITE ${OutputHrc} "<?xml version=\"1.0\" encoding='Windows-1251'?>\n")
file(APPEND ${OutputHrc} "<!--\nThis is autogenerated file. All changes will be lost!\n${CurrentTime}\n")
file(APPEND ${OutputHrc} "${CMakeVersion}\n-->\n\n\n")

WriteVariables("${VariableList}")
WriteCommands("${CommandList}")

foreach(_command ${CommandList})
  CMakeCall("--help-command;${_command}" _info NO)
  ParseCommandInfo("${_info}" Keywords_${_command})
  if(Keywords_${_command} AND NOT _command IN_LIST SkipKeywordForCommands AND NOT _command IN_LIST SkipCommands)
    #file(APPEND ${OutputHrc} "<!--\n${_info}\n-->")
    WriteKeywords(${_command} "${Keywords_${_command}}")
  endif()
endforeach(_command)
